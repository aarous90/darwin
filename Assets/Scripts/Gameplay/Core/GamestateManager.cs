//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34011
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class GamestateManager : MonoBehaviour
{
	
	public static GamestateManager Get()
	{
		GameObject im = GameObject.Find("GamestateManager");
		if (im != null)
		{
			return im.GetComponent<GamestateManager>();
		}
		return null;
	}
	
	// Use this for initialization
	void Start()
	{
		UnityEngine.Object.DontDestroyOnLoad(this);
		Initialize();
		// enter the first state manually
		m_CurrentGameState = GetMainMenuState();
		m_CurrentGameState.Enter();
	}

	void Update()
	{

	}
	
	////////////////////////////////////////////////////////////////////
	/// Methods
	////////////////////////////////////////////////////////////////////
	
	public MainMenuState GetMainMenuState()
	{
		return m_MainMenuState;
	}
	
	public MultiplayerState GetMultiplayerState()
	{
		return m_MultiplayerState;
	}
	
	public TrainingState GetTrainingState()
	{
		return m_TrainingState;
	}
	
	public IGameState GetCurrentState()
	{
		return m_CurrentGameState;
	}
	
	////////////////////////////////////////////////////////////////////
	
	public void ChangeState(GamestateType nextState)
	{
		if (m_CurrentGameState == null)
		{
			return;
		}

		print("Changing From " + m_CurrentGameState.GetGamestateType().ToString() + " to " + nextState.ToString());

		m_CurrentGameState.Leave();
		
		switch (nextState) // change to next state
		{
		case GamestateType.MainMenu:
			m_CurrentGameState = GetMainMenuState();
			break;
		case GamestateType.Multiplayer:
			m_CurrentGameState = GetMultiplayerState();
			break;
		case GamestateType.Training:
			m_CurrentGameState = GetTrainingState();
			break;
		case GamestateType.Exit:
			m_CurrentGameState = null;
			return;
		default:
			throw new Exception("Invalid Gamestate Type!");
		}
		
		m_CurrentGameState.Enter();
	}
	
	////////////////////////////////////////////////////////////////////
	
	private void Initialize()
	{
		if (m_MainMenuState != null)
		{
			return;
		}
		m_MainMenuState = new MainMenuState();
		
		if (m_MultiplayerState != null)
		{
			return;
		}
		m_MultiplayerState = new MultiplayerState();
		
		if (m_TrainingState != null)
		{
			return;
		}
		m_TrainingState = new TrainingState();
	}
	
	////////////////////////////////////////////////////////////////////
	/// Fields
	////////////////////////////////////////////////////////////////////
	
	private MainMenuState m_MainMenuState;
	
	private MultiplayerState m_MultiplayerState;
	
	private TrainingState m_TrainingState;
	
	////////////////////////////////////////////////////////////////////
	
	private IGameState m_CurrentGameState;
	
	
}
